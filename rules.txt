
    @Rule(
        Fact(action="procurar_doenca"),
        Fact(dor_de_cabeca=MATCH.dor_de_cabeca),
        Fact(febre=MATCH.febre),
        Fact(tontura=MATCH.tontura),
        Fact(dor_olho=MATCH.dor_olho),
        Fact(perda_paladar_apetite=MATCH.perda_paladar_apetite),
        Fact(manchas_erupcoes=MATCH.manchas_erupcoes),
        Fact(cansaco=MATCH.cansaco),
        Fact(dor_corpo=MATCH.dor_corpo),
        Fact(dor_osso_articulacao=MATCH.dor_osso_articulacao),
        Fact(dor_abdominal=MATCH.dor_abdominal),
        Fact(nausea_vomito=MATCH.nausea_vomito),
        Fact(tosse=MATCH.tosse),
        Fact(calafrio=MATCH.calafrio),
        Fact(suores=MATCH.suores),
        Fact(fraqueza=MATCH.fraqueza),
        Fact(diarreia=MATCH.diarreia),
        Fact(coceira_anal=MATCH.coceira_anal),
        Fact(palpitacao=MATCH.palpitacao),
        Fact(impotencia=MATCH.impotencia),
        Fact(emagrecimento=MATCH.emagrecimento),
        Fact(end_aum_figado=MATCH.end_aum_figado),
        Fact(dor_muscular=MATCH.dor_muscular),
        Fact(sens_plen_gastr=MATCH.sens_plen_gastr),
        Fact(dor_costas=MATCH.dor_costas),
        Fact(dor_articulacao=MATCH.dor_articulacao),
        Fact(mal_estar=MATCH.mal_estar),
        NOT(Fact(doenca=MATCH.doenca)),
        salience=-999
    )

    def not_matched(
        self,
        dor_de_cabeca,
        febre,
        tontura,
        dor_olho,
        perda_paladar_apetite,
        manchas_erupcoes,
        cansaco,
        dor_corpo,
        dor_osso_articulacao,
        dor_abdominal,
        nausea_vomito,
        tosse,
        calafrio,
        suores,
        fraqueza,
        diarreia,
        coceira_anal,
        palpitacao,
        impotencia,
        emagrecimento,
        end_aum_figado,
        dor_muscular,
        sens_plen_gastr,
        dor_costas,
        dor_articulacao,
        mal_estar,
    ):
        print("\nNão foi encontrado nenhuma doença baseado nos sintomas informados.")
        lis = [
            dor_de_cabeca,
            febre,
            tontura,
            dor_olho,
            perda_paladar_apetite,
            manchas_erupcoes,
            cansaco,
            dor_corpo,
            dor_osso_articulacao,
            dor_abdominal,
            nausea_vomito,
            tosse,
            calafrio,
            suores,
            fraqueza,
            diarreia,
            coceira_anal,
            palpitacao,
            impotencia,
            emagrecimento,
            end_aum_figado,
            dor_muscular,
            sens_plen_gastr,
            dor_costas,
            dor_articulacao,
            mal_estar,
        ]
        max_count = 0
        max_disease = ""
        for key, val in self.lista_sintomas.items():
            count = 0
            temp_list = eval(key)
            for j in range(0, len(lis)):
                if temp_list[j] == lis[j] and (lis[j] == "alta" or lis[j] == "baixa" or lis[j] == "sim"):
                    count = count + 1
            if count > max_count:
                max_count = count
                max_disease = val
        if max_disease != "":
            self.nao_encontrado(max_disease)